import pefile

def extract_data(filename):
	pe = pefile.PE(filename)
	for section in pe.sections:
		if b'.data' in section.Name:
			data = section.get_data(section.VirtualAddress, section.SizeOfRawData)
			address = section.VirtualAddress
			return data, address
def rc4crypt(data, key):
    #If the input is a string convert to byte arrays
    if type(data) == str:
        data = data.encode('utf-8')
    if type(key) == str:
        key = key.encode('utf-8')
    x = 0
    box = list(range(256))
    for i in range(256):
        x = (x + box[i] + key[i % len(key)]) % 256
        box[i], box[x] = box[x], box[i]
    x = 0
    y = 0
    out = []
    for c in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(c ^ box[(box[x] + box[y]) % 256])
    return bytes(out)
def get_offset(enc_addr,data_sec_off,filename):
	pe = pefile.PE(filename)
	image_base = pe.OPTIONAL_HEADER.ImageBase
	return enc_addr - image_base - data_sec_off
def main():
	key = b'VcFFI2Rj6t15'
	c2_enc = 0x01800FF340 ; c2_size = 1023
	data_1 = 0x1800FF790 ; data_1_size = 79
	data_2 = 0x1800FF7E0 ; data_2_size = 79 
	filename = 'second_stage.bin'
	data_sec , data_sec_off = extract_data(filename)
	c2_off = get_offset(c2_enc,data_sec_off,filename)
	data_1_off = get_offset(data_1,data_sec_off,filename)
	data_2_off = get_offset(data_2,data_sec_off,filename)	
	print("#------------- c2 ------------#")
	c2_dec = rc4crypt(data_sec[c2_off:c2_off+c2_size],key).replace(b'\x00',b'').split(b',')
	for i in c2_dec:
		print(i,'\n')
	print("#-----------#")
	print(rc4crypt(data_sec[data_1_off:data_1_off+data_1_size],key).replace(b'\x00',b''))
	print("#-------------#")
	print('botnet',rc4crypt(data_sec[data_2_off:data_2_off+data_2_size],key).replace(b'\x00',b''))

if __name__ == "__main__":
	main()
