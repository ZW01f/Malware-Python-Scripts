import idautils 
import idc

ea = get_screen_ea()  		#get address by cursor . 
start = idc.get_func_attr(ea, FUNCATTR_START) #get the start ea of the function
end = idc.get_func_attr(ea,FUNCATTR_END)
end = end - 1  

#above get the start and end of function ok ?

#------------------#
#here get flags of each function in fuctions in binary . 
for function in idautils.Functions(): #get all functions
	function_flags = idc.get_func_attr(function, FUNCATTR_FLAGS) #get flags of this function 
#notes : FUNC_LIB -> this flag indicate Library function 
#	   : FUNC_THUNK -> inidcate small codes by compiler .
	if function_flags & FUNC_THUNK or function_flags & FUNC_LIB : #we don't need these type of function here 
		continue 
	addr_lst = list(idautils.FuncItems(function))
	for addr in addr_lst:
		if (start <= addr <= end): #see if that addr in our function range .
				inst = DecodeInstruction(addr)
				if inst.itype in [idaapi.NN_call]: #here we get all the call instructions inside our range [function]
					refs_n = len(list(idautils.CodeRefsTo(get_first_fcref_from(addr), 0)))
					print("0x%x %s \t%d" % (addr ,(idc.generate_disasm_line(addr,0)),refs_n))
#idc.generate_disasm_line(addr,0) -> will print the disassemble of address .
