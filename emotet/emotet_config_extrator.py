import struct 
def tohex(data):
    import binascii
    if type(data) == str:
        return binascii.hexlify(data.encode('utf-8'))
    else:
        return binascii.hexlify(data)
def xor_dec(enc_data,key):
	dec = [] 
	for i in range(len(enc_data)):
		dec.append(enc_data[i] ^ key[i % len(key)])
	return bytes(dec)
def get_ip(ip_binary):
    # Convert the binary network format to a human-readable string format
    import socket
    ip_str = socket.inet_ntoa(ip_binary)
    return ip_str
def extract_data(filename):
	import pefile
	pe = pefile.PE(filename)
	for section in pe.sections:
		if '.data' in section.Name.decode(encoding='utf-8').rstrip('x00'):
			return (section.get_data(section.VirtualAddress, section.SizeOfRawData))
#--------------- MAIN ----------------#
file_name = 'mas_3_unpacked_04DE0000.bin' #file name 
data_sec = extract_data(file_name)

key = data_sec[:4]
config_enc_data_len = data_len = struct.unpack('<I',data_sec[:4])[0] ^ struct.unpack('<I',data_sec[4:8])[0] #it stores data in dd [little endien]
#to deal with little endien :  struct.unpack('<I',data)
config_enc_data = data_sec[8:config_enc_data_len+8]
dec_config = xor_dec(config_enc_data,key)
#formate to ips and ports 
splitted_data = [dec_config[i:i+8] for i in range(0, len(dec_config), 8)] #0001 is spilter .
i = 0 
for data in splitted_data:
    ip = get_ip(data[:4])
    port = int(tohex(data[4:6]),16)
    print('IP[{0}] = {1}:{2}'.format(i,ip,port))
    i = i + 1
