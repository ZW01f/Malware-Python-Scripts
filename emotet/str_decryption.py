import idautils 
import idc

def read_data_ida(address,size):
		data = idc.get_bytes(address, size)
		return data
def xor_dec(enc_data):
	dec = ''
	key = enc_data[:4]
	str_enc = enc_data[4:] 
	for i in range(len(str_enc)):
		dec += chr(str_enc[i] ^ key[i % len(key)])
	return dec
def rename_mem_addr (addr , new_name):
	if '\\' or '-' in new_name:
		idc.set_cmt(xref.frm , new_name,0)
	else :
		set_name(addr, new_name)
	        
start_addr = 0x04DE1000 #start of section
end_addr = 0x04DE1930   # section end 
ea = start_addr
while (ea < end_addr):
	for xref in idautils.XrefsTo(ea,1): #idea here : if we find xref to that it's used as argument 
		data_size = end_addr - xref.to 
		enc_data = read_data_ida(xref.to,data_size)
		init_dec_data = xor_dec(enc_data)
		dec_size = int(tohex(init_dec_data[:4])[:2].decode('utf-8'),16) #size of the actual decrypted data is first byte in decrypted data 
		actual_dec_data = init_dec_data[4:dec_size+4] 
		print(init_dec_data[4:dec_size+4])
		rename_mem_addr(xref.to,actual_dec_data)
	ea += 4 

# example = '4bf18e2a4cf18e2a6e82d10f7bc9d665c00bdab1dc13e7d78bcbcb71d1271c8c0ed9211104d921117da052656bb4487f68b63893cdbd485ac4f9e312cbf9e312aa959777b78dc33da09a8f7bb78dd9ddfafecfc2bbf5cbf7c2d9c7878f36581482365814e6463b7be1503173af193978e3bb3b44980c95a73fc1af6527f38c9e7ea0e948'
# example = unhex(example)
# dec_data = xor_dec(example)
# dec_size = int(tohex(dec_data[:4])[:2].decode('utf-8'),16)
# print(dec_size)
# print(dec_data[4:dec_size+4])

