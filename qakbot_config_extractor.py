import socket
#------------help functions --------------# 
def tohex(data):
    import binascii
    if type(data) == str:
        return binascii.hexlify(data.encode('utf-8'))
    else:
        return binascii.hexlify(data) 
def unhex(hex_string):
    import binascii
    if type(hex_string) == str:
        return binascii.unhexlify(hex_string.encode('utf-8'))
    else:
        return binascii.unhexlify(hex_string)
def rc4crypt(data, key):
    #If the input is a string convert to byte arrays
    if type(data) == str:
        data = data.encode('utf-8')
    if type(key) == str:
        key = key.encode('utf-8')
    x = 0
    box = list(range(256))
    for i in range(256):
        x = (x + box[i] + key[i % len(key)]) % 256
        box[i], box[x] = box[x], box[i]
    x = 0
    y = 0
    out = []
    for c in data:
        x = (x + 1) % 256
        y = (y + box[x]) % 256
        box[x], box[y] = box[y], box[x]
        out.append(c ^ box[(box[x] + box[y]) % 256])
    return bytes(out)
def calculate_sha1(input_string):
    import hashlib
    sha1_hash = hashlib.sha1()
    sha1_hash.update(input_string)
    return sha1_hash.digest()
def get_ip(ip_binary):
    # Convert the binary network format to a human-readable string format
    ip_str = socket.inet_ntoa(ip_binary)
    return ip_str
import pefile
def read_resource_section(file_name , res_name): 
    pe = pefile.PE(file_name)
    for rsrc in pe.DIRECTORY_ENTRY_RESOURCE.entries:
      for entry in rsrc.directory.entries:
        if entry.name is not None:
          if entry.name.__str__() == res_name:
             offset = entry.directory.entries[0].data.struct.OffsetToData
             size = entry.directory.entries[0].data.struct.Size
             return pe.get_memory_mapped_image()[offset:offset+size]
 

#------ Main --------#
# file_name = "test.bin"
print('Enter file name [path]')
file_name = input()
enc_res_1 = read_resource_section(file_name,'5812')
enc_res_2 = read_resource_section(file_name,'3719')

key = b'\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'
final_key = calculate_sha1(key) #key == 43a5b0bdb1b829bb796e3dbad916f7185f6a6b1a [from cyberchef]
dec_data = rc4crypt(enc_res_2,final_key) #IPs
dec_data_0 = rc4crypt(enc_res_1,final_key) #BOTNET and campaign.
# #split data into 6 bytes len [Ips == 4 , port == 2] , 7 because data splite by "01"
print("#------------- Decrypted Configs ---------#")
print(dec_data_0[20:].decode('utf-8'))
print('#--------------IPs-------------#')
dec_data =dec_data[21:]
splitted_data = [dec_data[i:i+7] for i in range(0, len(dec_data), 7)]
i = 0 
for data in splitted_data:
    ip = get_ip(data[:4])
    port = int(tohex(data[4:6]),16)
    print('IP[{0}] = {1}:{2}'.format(i,ip,port))
    i = i + 1
