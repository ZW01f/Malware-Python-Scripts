#it read hash -> prepare_hash(hash) -> 1
# make hash from function name -> 2
# compare two hashes .
#---------note : it's a little bit slowly , we can make it fast by make the db outside IDA . 
from pefile import PE, DIRECTORY_ENTRY
import os
import pefile
import idc 
def get_pe_exports(file_path):
    pe = PE(file_path)
    d = [DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_EXPORT']]
    pe.parse_data_directories(directories=d)
    exports = []
    for export in pe.DIRECTORY_ENTRY_EXPORT.symbols:
        if export.name is not None: exports.append(export.name.decode())
    return list(set(exports))
def mw_api_fn_resolve(function_name):
    result = 0x2B 
    for char in function_name:
        result = (ord(char) + 0x10f * result) & 0x1FFFFF  # Ensure result fits within 32 bits
    return result
#-----iterate on all dlls [i need ] ------------#
dll_list = ['kernel32.dll', 'comctl32.dll', 'advapi32.dll', 'comdlg32.dll',
    'gdi32.dll',    'msvcrt.dll',   'netapi32.dll', 'ntdll.dll',
    'ntoskrnl.exe', 'oleaut32.dll', 'psapi.dll',    'shell32.dll',
    'shlwapi.dll',    'urlmon.dll',   'user32.dll',
    'winhttp.dll',  'wininet.dll',  'ws2_32.dll',   'wship6.dll',
    'advpack.dll']
#------this read ur windows dir to get the dlls-----#
system_path = os.path.join(os.environ['SystemRoot'], 'System32')
hash_db = {}
#------------make hashes dictionary -----------#
for dll in dll_list:
	dll_path = system_path+ '\\' + dll
	for api in get_pe_exports(dll_path) : 
		hash_value = hex(mw_api_fn_resolve(api))
		hash_db[hash_value] = api
		# print(api +' = ' +hex(mw_api_fn_resolve(api)),end=',\n')
# ----------------- look up for hashes -------------- #
def prepare_hash(a1):
	return (a1 ^ ((a1 ^ 0x76C7) << 16) ^ 0xAFB9) & 0x1FFFFF
#--------------------- IDA python --------------------- #
for addr in range(0x41C9F8 , 0x41CC28 , 4):
	read_memory = idc.get_wide_dword(addr) #read dw from memory . 
	hash_value = hex(prepare_hash(read_memory))
	api_name = hash_db.get(hash_value)
	idc.set_name(addr , api_name)
